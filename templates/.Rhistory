#' Set up commands for highlighting Stan in LaTeX.
make_header = function() {
has_pygments()
style = stanhl_opts$get("style")
# Define Shaded
cat(c("\\definecolor{shadecolor}{RGB}{248,248,248}",
"\\ifcsmacro{Shaded}{}{\\newenvironment{Shaded}%",
"{\\begin{snugshade}}{\\end{snugshade}}}"),
sep = "\n",
file = "highlight.tex")
# Add highlight commands
cat(system2("pygmentize",
args = c("-S", style, "-f", "latex"),
stdout = TRUE),
sep = "\n",
file = "highlight.tex",
append = TRUE)
}
add_stan_hook = function() {
hook_output = knitr::knit_hooks$get("source")
knitr::knit_hooks$set(source = function(x, options) {
if (options$engine == "stan") {
# Apply syntax highlighting
hlighted = stanhl(x)
# Wrap in shaded enviornment
paste("\\begin{Shaded}",
hlighted,
"\\end{Shaded}",
sep = "\n")
} else {
hook_output(x, options)
}
})
}
stanhl_init = function() {
has_pygments()
make_header()
add_stan_hook()
knitr::raw_latex("\\input{highlight.tex}")
}
stanhl_init()
stanhl = function(x) {
has_pygments()
paste(system2("pygmentize",
args = c("-f", "latex", "-l", "stan"),
input = x,
stdout = TRUE),
collapse = "\n")
}
stanhl::stanhl_init()
stanhl_init()
make_header()
make_header()
add_stan_hook()
stan_binom <- "
data{
int N; // number of observations
int H; // number of observed head
}
parameters{
real<lower=0, upper=1> p; // parameter for binomial distribution
}
model{
// you can also specify the prior here.
// If you leave it empty, it will use a flat or uniform prior
p ~ uniform(0, 1);
H ~ binomial(N, p); // likelihood func
}
"
# it is faster if you don't need to compile the model
stanhl(stan_binom)
# invisible(gsub("@","\\@",stanhl(stan_binom)))
# params:
#   i: "`r i`"
# includes:
#   in_header: "preamble.tex"
library(knitr)
library(ggplot2)
library(gridExtra)
library(grid)
library(dplyr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 6)
library(rstan)
library(devtools)
# install_github('jr-packages/stanhl')
# install_github('JakeJing/stanhl')
# Note: this only works for python3; need to first install `pip3 install Pygments`; and `xcode-select --install`
library(stanhl)
library(pdftools) # tikz
library(tikzDevice) # tikz device
library(purrr)
# devtools::install_github("r-lib/conflicted")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("map", "purrr")
conflict_prefer("map_dfr", "purrr")
conflict_prefer("lag", "dplyr")
conflict_prefer("extract", "rstan")
conflict_prefer("accumulate", "purrr")
conflict_prefer("between", "dplyr")
conflict_prefer("combine", "dplyr")
conflict_prefer("expand", "tidyr")
conflict_prefer("first", "dplyr")
conflict_prefer("last", "dplyr")
conflict_prefer("group_rows", "dplyr")
conflict_prefer("LdFlags", "Rcpp")
conflict_prefer("pack", "Matrix")
conflict_prefer("unpack", "Matrix")
conflict_prefer("registerPlugin", "Rcpp")
conflict_prefer("transpose", "purrr")
conflict_prefer("when", "purrr")
# library(reticulate) # python engine
# use_python('/usr/local/bin/python3')
# library(JuliaCall) # julia engine
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "cairo_pdf",
# dev = "png",
dev.args = list(bg = "white"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3',julia = '/Applications/Julia-1.5.app/Contents/Resources/julia/bin'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
# stanhl::stanhl_init()
stan_binom <- "
data{
int N; // number of observations
int H; // number of observed head
}
parameters{
real<lower=0, upper=1> p; // parameter for binomial distribution
}
model{
// you can also specify the prior here.
// If you leave it empty, it will use a flat or uniform prior
p ~ uniform(0, 1);
H ~ binomial(N, p); // likelihood func
}
"
# it is faster if you don't need to compile the model
stanhl(stan_binom)
# invisible(gsub("@","\\@",stanhl(stan_binom)))
# it is faster if you don't need to compile the model
stanhl::stanhl(stan_binom)
stanhl::stanhl
# results='asis' is important, so that it can be kept in the latex
stanhl_file("./stanscripts/stan_binom.stan")
stanhl(binom)
stanhl(stan_binom)
# results='asis' is important, so that it can be kept in the latex
stanhl_file("./stanscripts/stan_binom.stan")
# it is faster if you don't need to compile the model
stanhl::stanhl(stan_binom)
# results='asis' is important, so that it can be kept in the latex
stanhl_file("./stanscripts/stan_binom.stan")
stanhl_file
remove.packages("stanhl")
library(devtools)
# install_github('jr-packages/stanhl')
install_github('JakeJing/stanhl')
# params:
#   i: "`r i`"
# includes:
#   in_header: "preamble.tex"
library(knitr)
library(ggplot2)
library(gridExtra)
library(grid)
library(dplyr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 6)
library(rstan)
library(devtools)
# install_github('jr-packages/stanhl')
# install_github('JakeJing/stanhl')
# Note: this only works for python3; need to first install `pip3 install Pygments`; and `xcode-select --install`
library(stanhl)
library(pdftools) # tikz
library(tikzDevice) # tikz device
library(purrr)
# devtools::install_github("r-lib/conflicted")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("map", "purrr")
conflict_prefer("map_dfr", "purrr")
conflict_prefer("lag", "dplyr")
conflict_prefer("extract", "rstan")
conflict_prefer("accumulate", "purrr")
conflict_prefer("between", "dplyr")
conflict_prefer("combine", "dplyr")
conflict_prefer("expand", "tidyr")
conflict_prefer("first", "dplyr")
conflict_prefer("last", "dplyr")
conflict_prefer("group_rows", "dplyr")
conflict_prefer("LdFlags", "Rcpp")
conflict_prefer("pack", "Matrix")
conflict_prefer("unpack", "Matrix")
conflict_prefer("registerPlugin", "Rcpp")
conflict_prefer("transpose", "purrr")
conflict_prefer("when", "purrr")
# library(reticulate) # python engine
# use_python('/usr/local/bin/python3')
# library(JuliaCall) # julia engine
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "cairo_pdf",
# dev = "png",
dev.args = list(bg = "white"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3',julia = '/Applications/Julia-1.5.app/Contents/Resources/julia/bin'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
# stanhl::stanhl_init()
# results='asis' is important, so that it can be kept in the latex
stanhl_file("./stanscripts/stan_binom.stan")
stan_binom <- "
data{
int N; // number of observations
int H; // number of observed head
}
parameters{
real<lower=0, upper=1> p; // parameter for binomial distribution
}
model{
// you can also specify the prior here.
// If you leave it empty, it will use a flat or uniform prior
p ~ uniform(0, 1);
H ~ binomial(N, p); // likelihood func
}
"
# it is faster if you don't need to compile the model
stanhl::stanhl(stan_binom)
# invisible(gsub("@","\\@",stanhl(stan_binom)))
stanhl
stanhl::stanhl
# params:
#   i: "`r i`"
# includes:
#   in_header: "preamble.tex"
library(knitr)
library(ggplot2)
library(gridExtra)
library(grid)
library(dplyr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 6)
library(rstan)
library(devtools)
# install_github('jr-packages/stanhl')
# install_github('JakeJing/stanhl')
# Note: this only works for python3; need to first install `pip3 install Pygments`; and `xcode-select --install`
library(stanhl)
library(pdftools) # tikz
library(tikzDevice) # tikz device
library(purrr)
# devtools::install_github("r-lib/conflicted")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("map", "purrr")
conflict_prefer("map_dfr", "purrr")
conflict_prefer("lag", "dplyr")
conflict_prefer("extract", "rstan")
conflict_prefer("accumulate", "purrr")
conflict_prefer("between", "dplyr")
conflict_prefer("combine", "dplyr")
conflict_prefer("expand", "tidyr")
conflict_prefer("first", "dplyr")
conflict_prefer("last", "dplyr")
conflict_prefer("group_rows", "dplyr")
conflict_prefer("LdFlags", "Rcpp")
conflict_prefer("pack", "Matrix")
conflict_prefer("unpack", "Matrix")
conflict_prefer("registerPlugin", "Rcpp")
conflict_prefer("transpose", "purrr")
conflict_prefer("when", "purrr")
# library(reticulate) # python engine
# use_python('/usr/local/bin/python3')
# library(JuliaCall) # julia engine
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "cairo_pdf",
# dev = "png",
dev.args = list(bg = "white"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3',julia = '/Applications/Julia-1.5.app/Contents/Resources/julia/bin'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
min.n<-2
max.n<-30
levs<-min.n:max.n
k<-length(levs)
Q<-matrix(0,k,k,dimnames=list(levs,levs))
for(i in 1:k) for(j in 1:k){
if(levs[i]==(levs[j]+1)) Q[i,j]<-0.05
if(levs[i]==(levs[j]-1)) Q[i,j]<-0.1
if(levs[j]==(2*levs[i])) Q[i,j]<-Q[i,j]+0.01
}
diag(Q)<--rowSums(Q)
Q
min.n<-2
max.n<-10
levs<-min.n:max.n
k<-length(levs)
Q<-matrix(0,k,k,dimnames=list(levs,levs))
for(i in 1:k) for(j in 1:k){
if(levs[i]==(levs[j]+1)) Q[i,j]<-0.05
if(levs[i]==(levs[j]-1)) Q[i,j]<-0.1
if(levs[j]==(2*levs[i])) Q[i,j]<-Q[i,j]+0.01
}
diag(Q)<--rowSums(Q)
Q
min.n<-2
max.n<-12
levs<-min.n:max.n
k<-length(levs)
Q<-matrix(0,k,k,dimnames=list(levs,levs))
for(i in 1:k) for(j in 1:k){
if(levs[i]==(levs[j]+1)) Q[i,j]<-0.05
if(levs[i]==(levs[j]-1)) Q[i,j]<-0.1
if(levs[j]==(2*levs[i])) Q[i,j]<-Q[i,j]+0.01
}
diag(Q)<--rowSums(Q)
Q
library(knitr)
library(ggplot2)
library(gridExtra)
library(grid)
library(dplyr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 6)
library(rstan)
library(pdftools) # tikz
library(tikzDevice) # tikz device
library(purrr)
# devtools::install_github("r-lib/conflicted")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("map", "purrr")
conflict_prefer("map_dfr", "purrr")
conflict_prefer("lag", "dplyr")
# library(reticulate) # python engine
# use_python('/usr/local/bin/python3')
# library(JuliaCall) # julia engine
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "cairo_pdf", dev.args = list(bg = "white"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3',julia = '/Applications/Julia-1.5.app/Contents/Resources/julia/bin'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
53424/5000
