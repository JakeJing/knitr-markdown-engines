definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# create a workbook
wb <- createWorkbook()
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
saveWorkbook(wb, paste0("../Data/meaning_split_single/Data_split_mng.xlsx"), overwrite = F)
})
result = dt %>%
split(.$mng_item) %>%
.[1:2] %>%
imap(., ~{
# reorganize the cols
concept = .x %>%
select(lgid3, language, Subgroup, mng_item, uralex_mng,
item_cogn = item, cogn_set, item_form = item, form_set, item_UPA, item_IPA,
definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# create a workbook
wb <- createWorkbook()
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
saveWorkbook(wb, paste0("../Data/meaning_split_single/Data_split_mng.xlsx"), overwrite = T)
})
result = dt %>%
split(.$mng_item) %>%
.[1:2] %>%
imap(., ~{
# reorganize the cols
concept = .x %>%
select(lgid3, language, Subgroup, mng_item, uralex_mng,
item_cogn = item, cogn_set, item_form = item, form_set, item_UPA, item_IPA,
definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# create a workbook
wb <- createWorkbook()
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
saveWorkbook(wb, paste0("../Data/meaning_split_single/Data_split_mng.xlsx"), overwrite = F)
})
# create a workbook as a global
wb <- createWorkbook()
result = dt %>%
split(.$mng_item) %>%
.[1:2] %>%
imap(., ~{
# reorganize the cols
concept = .x %>%
select(lgid3, language, Subgroup, mng_item, uralex_mng,
item_cogn = item, cogn_set, item_form = item, form_set, item_UPA, item_IPA,
definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# add worksheet
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
})
saveWorkbook(wb, paste0("../Data/meaning_split_single/Data_split_mng.xlsx"), overwrite = T)
# create a workbook as a global
wb <- createWorkbook()
result = dt %>%
split(.$mng_item) %>%
# .[1:2] %>%
imap(., ~{
# reorganize the cols
concept = .x %>%
select(lgid3, language, Subgroup, mng_item, uralex_mng,
item_cogn = item, cogn_set, item_form = item, form_set, item_UPA, item_IPA,
definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# add worksheet
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
})
saveWorkbook(wb, paste0("../Data/meaning_split_single/Data.xlsx"), overwrite = T)
result = dt %>%
split(.$mng_item) %>%
.[1:2] %>%
imap(., ~{
# reorganize the cols
concept = .x %>%
select(lgid3, language, Subgroup, mng_item, uralex_mng,
item_cogn = item, cogn_set, item_form = item, form_set, item_UPA, item_IPA,
definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# add worksheet
# create a workbook as local variable
wb <- createWorkbook()
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
saveWorkbook(wb, glue("../Data/meaning_split_313/{.y}_{meaning}.xlsx"))
})
result = dt %>%
split(.$mng_item) %>%
# .[1:2] %>%
imap(., ~{
# reorganize the cols
concept = .x %>%
select(lgid3, language, Subgroup, mng_item, uralex_mng,
item_cogn = item, cogn_set, item_form = item, form_set, item_UPA, item_IPA,
definition, borr_source:ref_abbr)
# add new Samoyedic langs
new_samoyed$mng_item = .x[1, "mng_item"]
new_samoyed$uralex_mng = meaning = .x[1, "uralex_mng"]
new_samoyed$definition = .x[1, "definition"]
concept = rbind(concept, new_samoyed)
# add worksheet
# create a workbook as local variable
wb <- createWorkbook()
addWorksheet(wb, glue("{.y}_{meaning}"), gridLines = TRUE) # add a sheet to the workbook
writeData(wb, glue("{.y}_{meaning}"), concept)
# reformat the cols for item_cogn and cogn_set
cog_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(cog_typ)){
col_ids = grep("cogn", colnames(concept))
row_ids = which(concept$cogn_set == cog_typ[s]) + 1 # add 1 due to include header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
# reformat the cols for item_form and form_set
form_typ = concept %>%
filter(Subgroup == "Samoyed") %>%
pull(cogn_set) %>%
unique %>%
stri_remove_empty() # remove empty
for(s in seq_along(form_typ)){
col_ids = grep("form", colnames(concept))
row_ids = which(concept$cogn_set == form_typ[s]) + 1 # add 1 due to header line
addStyle(wb, sheet = glue("{.y}_{meaning}"), styles[[s]],
rows = row_ids, cols = col_ids, gridExpand = T)
}
saveWorkbook(wb, glue("../Data/meaning_split_313/{.y}_{meaning}.xlsx"))
})
# params:
#   i: "`r i`"
# includes:
#   in_header: "preamble.tex"
library(knitr)
library(ggplot2)
library(gridExtra)
library(grid)
library(dplyr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 6)
library(rstan)
library(pdftools) # tikz
library(tikzDevice) # tikz device
library(purrr)
# library(reticulate) # python engine
# use_python('/usr/local/bin/python3')
# library(JuliaCall) # julia engine
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "cairo_pdf", dev.args = list(bg = "transparent"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3',julia = '/Applications/Julia-1.5.app/Contents/Resources/julia/bin'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
list(a = 1, b = 2:5, c = 4:5)
list(a = 1, b = 2:5, c = 4:5) %>%
imap(., ~{glue("{.x} is {.y}")})
list(a = 1, b = 2:5, c = 4:5) %>%
imap(., ~ {glue("{.y}")})
list(a = 1, b = 2:5, c = 4:5) %>%
imap(., ~ {glue("the name of list is {.y}")})
list(a = 1, b = 2:5, c = 4:5) %>%
imap(., ~ {glue("list name is: {.y}")})
c(1, 4, 5) %>%
imap(., ~ {glue("list name is: {.y}")})
c(1, 4, 5) %>%
list
# if it is an vector
c(a = 1, b = 4, c = 5) %>%
imap(., ~ {glue("list name is: {.y}")})
list(1, 2:5, 4:5) %>%
print()
list(1, 2:5, 4:5) %>%
imap(., ~ {glue("list name is: {.y}")})
DT1 = data.table(A=1:3,B=letters[1:3])
DT1
DT2 = data.table(A=4:5,B=letters[4:5])
l = list(DT1,DT2)
rbindlist(l)
imap(c(a = 1, b = 4, c = 5)) %>%
imap(., ~ {glue("list name is: {.y}")})
c(a = 1, b = 4, c = 5) %>%
seq_along() %>%
imap(., ~ {glue("list name is: {.y}")})
c(a = 1, b = 4, c = 5) %>%
imap(., ~ {glue("list name is: {.y}")})
seq_along(list(a = 1, b = 2:5, c = 4:5))
c(a = 1, b = 4, c = 5)  |> map(f, 1, 2, collapse = ",")
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), glue("list name is: {..1}"))
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), glue("list name is: {.x}"))
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), \(x, y) glue("list name is: {x}"))
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), \(x, y) glue("list element: {x} in position {y}"))
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), function(x, y) glue("list element: {x} in position {y}"))
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), \(x, y) glue("list element: {x} in position {y}"))
# use another way of map2 to get the index
c(a = 1, b = 4, c = 5) %>%
map2(., seq_along(.), \(x, y) glue("list element: {x} in position {y}"))
list(2, 4, 1) %>%
map(., sort, decreasing = TRUE)
x(2, 4, 1) %>%
map(., sort, decreasing = TRUE)
list(c(2, 4), c(4, 1), 1) %>%
map(., sort, decreasing = TRUE)
knitr::convert_chunk_header("Rmarkdown-scirpts.Rmd", "converted.qmd")
# params:
#   i: "`r i`"
# includes:
#   in_header: "preamble.tex"
library(knitr)
knitr::convert_chunk_header("Rmarkdown-scripts.Rmd", "converted.qmd")
getwd()
setwd("~/git/knitr-markdown-engines/templates")
knitr::convert_chunk_header("Rmarkdown-scripts.Rmd", "converted.qmd")
library(xfun)
#| label: setup
#| include: FALSE
# params:
#   i: "`r i`"
# includes:
#   in_header: "preamble.tex"
library(knitr)
library(ggplot2)
library(gridExtra)
library(grid)
library(dplyr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 6)
library(rstan)
library(devtools)
# install_github('jr-packages/stanhl')
# install_github('JakeJing/stanhl')
# Note: this only works for python3; need to first install `pip3 install Pygments`; and `xcode-select --install`
library(pdftools) # tikz
library(tikzDevice) # tikz device
library(purrr)
library(glue)
# devtools::install_github("r-lib/conflicted")
library(conflicted)
# use_python('/usr/local/bin/python3')
# library(JuliaCall) # julia engine
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "quartz_pdf", # better for plot resolution than cairo_pdf
# dev = "png",
# dpi = 300,
dev.args = list(bg = "white"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3',julia = '/Applications/Julia-1.5.app/Contents/Resources/julia/bin'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
# citations_1 <- tempfile(fileext = ".bib")
# file.copy(from = here::here("/Users/jakejing/switchdrive/bib/references.bib"), to = citations_1)
# install_github('jr-packages/stanhl')
install_github('JakeJing/stanhl')
library(devtools)
# install_github('jr-packages/stanhl')
install_github('JakeJing/stanhl')
