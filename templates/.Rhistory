titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = list(text = "x2"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = list(text = "y3"),
range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio))) %>%
style(hoverinfo = 'none')
mlogistic_plt
plt1 = plot_ly(scene='scene1', width = 800, height = 600) %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred1, # plot the fitted surface
colorscale = list(c(0, "rgb(227,74,51)"),
list(1, "rgb(227,74,51)")), # red
opacity = .95,
type = "surface",
showscale=FALSE
# colorbar = list(title = list(text = "<b>y/y<sub>pred</sub></b>"))
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat1,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = T, inherit = F
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat1,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = T, inherit = F
)
plt2 = plot_ly(scene='scene2') %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred2, # plot the fitted surface
colorscale = list(c(0, "rgb(103,169,207)"),
list(1, "rgb(103,169,207)")), # blue
type = "surface",
showscale=FALSE
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat2,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = F, inherit = T
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat2,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = F, inherit = T
)
plt3 = plot_ly(scene='scene3') %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred3, # plot the fitted surface
colorscale = list(c(0, "rgb(136,86,167)"),
list(1, "rgb(136,86,167)")), # purple
opacity = .7,
type = "surface",
showscale=FALSE
# colorbar = list(title = list(text = "<b>y/y<sub>pred</sub></b>"))
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat3,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = F, inherit = T
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat3,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = F, inherit = T
) %>%
layout(margin = list(l=1, r=1, b=1, t=1))
ratio = 0.3
fsize = 10
mlogistic_plt <- subplot(plt1, plt2, plt3, nrows = 3) %>%
# layout(autosize = T, margin=list( l = 10, r = 10, b = 10, t = 10, pad = 1)) %>%
layout(legend = list(title = list(text = "<b>Marginal lines</b>"),
x = 1, y = 0.5, font = list(size = fsize)),
title = list(text = "<b>Multinomial logistic regression surfaces<b>",
# font = list(family = "Courier New", color = "blue",
# size = fsize),
y = 0.85),
scene = list(xaxis = list(title = "x1",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = "x2",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = "y1", range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio)),
scene2 = list(xaxis = list(title = "x1",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = "x2",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = "y2", range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio)),
scene3 = list(xaxis = list(title = list(text = "x1"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = list(text = "x2"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = list(text = "y3"),
range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio))) %>%
style(hoverinfo = 'none')
mlogistic_plt
plt1 = plot_ly(scene='scene1', width = 800, height = 600) %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred1, # plot the fitted surface
colorscale = list(c(0, "rgb(227,74,51)"),
list(1, "rgb(227,74,51)")), # red
opacity = .95,
type = "surface",
showscale=FALSE
# colorbar = list(title = list(text = "<b>y/y<sub>pred</sub></b>"))
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat1,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = T, inherit = F
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat1,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = T, inherit = F
)
plt2 = plot_ly(scene='scene2') %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred2, # plot the fitted surface
colorscale = list(c(0, "rgb(103,169,207)"),
list(1, "rgb(103,169,207)")), # blue
type = "surface",
showscale=FALSE
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat2,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = F, inherit = T
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat2,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = F, inherit = T
)
plt3 = plot_ly(scene='scene3') %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred3, # plot the fitted surface
colorscale = list(c(0, "rgb(136,86,167)"),
list(1, "rgb(136,86,167)")), # purple
opacity = .7,
type = "surface",
showscale=FALSE
# colorbar = list(title = list(text = "<b>y/y<sub>pred</sub></b>"))
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat3,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = F, inherit = T
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat3,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = F, inherit = T
) %>%
layout(margin = list(l=1, r=1, b=1, t=1))
ratio = 0.25
fsize = 10
mlogistic_plt <- subplot(plt1, plt2, plt3, nrows = 3) %>%
# layout(autosize = T, margin=list( l = 10, r = 10, b = 10, t = 10, pad = 1)) %>%
layout(legend = list(title = list(text = "<b>Marginal lines</b>"),
x = 1, y = 0.5, font = list(size = fsize)),
title = list(text = "<b>Multinomial logistic regression surfaces<b>",
# font = list(family = "Courier New", color = "blue",
# size = fsize),
y = 0.85),
scene = list(xaxis = list(title = "x1",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = "x2",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = "y1", range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio)),
scene2 = list(xaxis = list(title = "x1",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = "x2",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = "y2", range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio)),
scene3 = list(xaxis = list(title = list(text = "x1"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = list(text = "x2"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = list(text = "y3"),
range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio))) %>%
style(hoverinfo = 'none')
mlogistic_plt
# # save as static pictures
# # using kaleido (png, jpg, jpeg, webp, svg, or pdf formats)
# # >> pip3 install kaleido
# save_image(mlogistic_plt,
#            file = "./visualization/multi-logistic-reg-surface.png",
#            width = 1100, height = 600, scale = 2) # scale: adjust resolution
# # # save as html
# saveWidget(widget = mlogistic_plt,
#            file = "./visualization/multi-logistic-reg-surface.html")
# # synchronize with the server
# # # options(browser = 'false') # avoid open the browser automatically
api_create(mlogistic_plt, filename = "multi-logistic-reg-surface",
fileopt = "overwrite", sharing = "public")
# knitr::include_graphics("./visualization/multi-logistic-reg-surface.png")
plt1 = plot_ly(scene='scene1', width = 800, height = 600) %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred1, # plot the fitted surface
colorscale = list(c(0, "rgb(227,74,51)"),
list(1, "rgb(227,74,51)")), # red
opacity = .95,
type = "surface",
showscale=FALSE
# colorbar = list(title = list(text = "<b>y/y<sub>pred</sub></b>"))
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat1,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = T, inherit = F
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat1,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = T, inherit = F
)
plt2 = plot_ly(scene='scene2') %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred2, # plot the fitted surface
colorscale = list(c(0, "rgb(103,169,207)"),
list(1, "rgb(103,169,207)")), # blue
type = "surface",
showscale=FALSE
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat2,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = F, inherit = T
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat2,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = F, inherit = T
)
plt3 = plot_ly(scene='scene3') %>%
add_surface(
x = ~axis_x, y = ~axis_y, z = ~ypred3, # plot the fitted surface
colorscale = list(c(0, "rgb(136,86,167)"),
list(1, "rgb(136,86,167)")), # purple
opacity = .7,
type = "surface",
showscale=FALSE
# colorbar = list(title = list(text = "<b>y/y<sub>pred</sub></b>"))
) %>%
add_trace(
data = line1, x = ~x1, y = ~x2, z = ~yhat3,
type = "scatter3d", mode = "lines", name = "Line 1 (x1 = 0)",
line = list(color = "purple", width = 2),
showlegend = F, inherit = T
) %>%
add_trace(
data = line2, x = ~x1, y = ~x2, z = ~yhat3,
type = "scatter3d", mode = "lines", name = "Line 2 (x2 = -1)",
line = list(color = "orange", width = 2),
showlegend = F, inherit = T
) %>%
layout(margin = list(l=1, r=1, b=1, t=1))
ratio = 0.25
fsize = 9
mlogistic_plt <- subplot(plt1, plt2, plt3, nrows = 3) %>%
# layout(autosize = T, margin=list( l = 10, r = 10, b = 10, t = 10, pad = 1)) %>%
layout(legend = list(title = list(text = "<b>Marginal lines</b>"),
x = 1, y = 0.5, font = list(size = fsize)),
title = list(text = "<b>Multinomial logistic regression surfaces<b>",
# font = list(family = "Courier New", color = "blue",
# size = fsize),
y = 0.85),
scene = list(xaxis = list(title = "x1",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = "x2",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = "y1", range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio)),
scene2 = list(xaxis = list(title = "x1",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = "x2",
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = "y2", range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio)),
scene3 = list(xaxis = list(title = list(text = "x1"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
yaxis = list(title = list(text = "x2"),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
zaxis = list(title = list(text = "y3"),
range = c(0, 1),
titlefont = list(size = fsize),
tickfont = list(size = fsize)),
camera = list(eye = list(x = 1.4, y = 1.4, z = 1.4)),
aspectratio = list(x = ratio, y = ratio, z = ratio))) %>%
style(hoverinfo = 'none')
mlogistic_plt
# # save as static pictures
# # using kaleido (png, jpg, jpeg, webp, svg, or pdf formats)
# # >> pip3 install kaleido
# save_image(mlogistic_plt,
#            file = "./visualization/multi-logistic-reg-surface.png",
#            width = 1100, height = 600, scale = 2) # scale: adjust resolution
# # # save as html
# saveWidget(widget = mlogistic_plt,
#            file = "./visualization/multi-logistic-reg-surface.html")
# # synchronize with the server
# # # options(browser = 'false') # avoid open the browser automatically
api_create(mlogistic_plt, filename = "multi-logistic-reg-surface",
fileopt = "overwrite", sharing = "public")
# knitr::include_graphics("./visualization/multi-logistic-reg-surface.png")
library(knitr)
library(ggplot2)
library(gridExtra) # grid.arrange
library(dplyr)
library(purrr)
library(magrittr)
library(tidyr) # gather
library(tibble) # rowtocolumn
library(kableExtra) # kable
library(Rcpp)
library(RcppArmadillo)
library(inline) # masked from ‘package:Rcpp’ registerPlugin
library(microbenchmark) # microbenchmark timings
library(RcppParallel)
library(RInside)
library(data.table) # fread
library(foreach) # foreach
library(parallel) # mclapply
library(doParallel)
registerDoParallel(cores = 4)
library(rexpokit)
library(extraDistr)
library(rstan)
library(ape)
library(ggtree)
library(ggstance) # geom_barh in facet_plot
source("../Functions/graft.R")
source("../Functions/plot_Q_matrix.R") # func to plot transitional matrix
source("../Functions/plot_annotation.R") # func to plot the UD dependency tree
library(grid) # grid.draw
# Save compiled models:
rstan_options(auto_write = TRUE)
library(bayesplot)
library(stringr) # str_to_title
library(viridis) # color blindness safe
library(scales)
library(brms)
# show_col(viridis_pal()(11))
library(cowplot) # plot_grid
# show_col(viridis_pal()(11))
library(ggforce) # geom_arc_bar
library(igraph) # graph_from_adjacency_matrix
# library(udpipe)
library(ggraph) # ggraph
library(ggplotify) # as.ggplot
library(ggh4x) # facet_nested
# install.packages("udpipe")
source("../Functions/coord_cartesian_panels.R") # coord_cartesian_panels
knit_hooks$set(crop = hook_pdfcrop, pars = function(before, options, envir) {
if (before) {
par(family = my.font)
} else {
NULL
}
})
opts_chunk$set(
fig.path = "figures/",
dev = "cairo_pdf", dev.args = list(bg = "transparent"), # or quartz_pdf (for lattice)
fig.height = 5,
fig.width = 6,
# engine.path = list(python = '/usr/local/bin/python3'),
# python.reticulate = T, # not necessary, if use_python() is used above
message = F,
warning = F,
autodep = T,
cache.comments = F,
crop = T,
comment = NA,
pars = T
)
# graphics setup:
my.font <- "Helvetica"
# ggplot
theme_set(theme_bw(base_size = 24) +
theme(
text = element_text(family = my.font),
plot.background = element_rect(fill = "transparent", colour = NA)
))
theme_phylo <- function(grid = T, year.size = 10) {
if (grid) {
theme(
axis.text.x = element_text(size = year.size),
panel.grid.major.x = element_line(
size = .2,
color = "grey", linetype = "dashed"
)
)
} else {
theme(axis.text.x = element_text(size = year.size))
}
}
density_theme <- theme(
# legend.position = "none",
legend.title = element_blank(),
strip.text.x = element_text(size = 16),
strip.text.y = element_text(size = 12)
)
reverse.time <- function(p) {
p$data$x <- p$data$x - max(p$data$x)
return(p)
}
# set the order of tips for summary tree
b_tips_order <- c(
"Hittite", "Albanian", "Armenian", "Ancient_Greek",
"Greek", "Persian", "Kurmanji", "Sanskrit",
"Marathi", "Hindi", "Urdu", "Latvian",
"Lithuanian", "Slovenian", "Old_Church_Slavonic",
"Croatian", "Bulgarian", "Upper_Sorbian", "Slovak",
"Czech", "Russian", "Old_East_Slavic", "Polish", "Ukrainian",
"Belarusian", "Gothic", "Faroese", "Icelandic",
"Swedish", "Danish", "English", "Dutch", "Afrikaans",
"Swiss_German", "German", "Breton", "Welsh", "Irish",
"Scottish_Gaelic", "Latin", "Romanian", "Italian",
"French", "Old_French", "Catalan", "Portuguese",
"Spanish"
)
options(width = 180, knitr.kable.NA = "", knitr.table.format = "latex")
trees <- read.nexus(file = "../Data/phylogeny/indoeuropean-B-1k-sample.nex")
# id = 1
tree <- trees[[id]]
id = 1
# id = 1
tree <- trees[[id]]
tree
vcv(tree)
heights(tree)
node.height(tree)
node.depth.edgelength(tree)
nodes(tree)
edge(tree)
edges(tree)
tree
node_height(tree)
node.height(tree)
node.height(tree, 1)
max(nodeHeights(tree))
max(phytools::nodeHeights(tree))
tree$edge.length = tree$edge.length/max(phytools::nodeHeights(tree))
